# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hehe/sensor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sensor(genpy.Message):
  _md5sum = "a0c50bebffb4e8af1cdb8ac5a415ed1d"
  _type = "hehe/sensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 number
int16 throttle
int16 rpm
int16 speed
float32 engine_load
int16 temperature
int16 humidity
string engine_status
string battery_status
int16 battery_cap
int16 air_pressure
int16 air_temperature
int16 torque
int16 load
int16 efficiency
int16 voltage
int16 current
int16 discharge
int16 hours
int16 minutes
int16 second
string health

"""
  __slots__ = ['number','throttle','rpm','speed','engine_load','temperature','humidity','engine_status','battery_status','battery_cap','air_pressure','air_temperature','torque','load','efficiency','voltage','current','discharge','hours','minutes','second','health']
  _slot_types = ['int16','int16','int16','int16','float32','int16','int16','string','string','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number,throttle,rpm,speed,engine_load,temperature,humidity,engine_status,battery_status,battery_cap,air_pressure,air_temperature,torque,load,efficiency,voltage,current,discharge,hours,minutes,second,health

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number is None:
        self.number = 0
      if self.throttle is None:
        self.throttle = 0
      if self.rpm is None:
        self.rpm = 0
      if self.speed is None:
        self.speed = 0
      if self.engine_load is None:
        self.engine_load = 0.
      if self.temperature is None:
        self.temperature = 0
      if self.humidity is None:
        self.humidity = 0
      if self.engine_status is None:
        self.engine_status = ''
      if self.battery_status is None:
        self.battery_status = ''
      if self.battery_cap is None:
        self.battery_cap = 0
      if self.air_pressure is None:
        self.air_pressure = 0
      if self.air_temperature is None:
        self.air_temperature = 0
      if self.torque is None:
        self.torque = 0
      if self.load is None:
        self.load = 0
      if self.efficiency is None:
        self.efficiency = 0
      if self.voltage is None:
        self.voltage = 0
      if self.current is None:
        self.current = 0
      if self.discharge is None:
        self.discharge = 0
      if self.hours is None:
        self.hours = 0
      if self.minutes is None:
        self.minutes = 0
      if self.second is None:
        self.second = 0
      if self.health is None:
        self.health = ''
    else:
      self.number = 0
      self.throttle = 0
      self.rpm = 0
      self.speed = 0
      self.engine_load = 0.
      self.temperature = 0
      self.humidity = 0
      self.engine_status = ''
      self.battery_status = ''
      self.battery_cap = 0
      self.air_pressure = 0
      self.air_temperature = 0
      self.torque = 0
      self.load = 0
      self.efficiency = 0
      self.voltage = 0
      self.current = 0
      self.discharge = 0
      self.hours = 0
      self.minutes = 0
      self.second = 0
      self.health = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4hf2h().pack(_x.number, _x.throttle, _x.rpm, _x.speed, _x.engine_load, _x.temperature, _x.humidity))
      _x = self.engine_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.battery_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12h().pack(_x.battery_cap, _x.air_pressure, _x.air_temperature, _x.torque, _x.load, _x.efficiency, _x.voltage, _x.current, _x.discharge, _x.hours, _x.minutes, _x.second))
      _x = self.health
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.number, _x.throttle, _x.rpm, _x.speed, _x.engine_load, _x.temperature, _x.humidity,) = _get_struct_4hf2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.engine_status = str[start:end].decode('utf-8')
      else:
        self.engine_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_status = str[start:end].decode('utf-8')
      else:
        self.battery_status = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.battery_cap, _x.air_pressure, _x.air_temperature, _x.torque, _x.load, _x.efficiency, _x.voltage, _x.current, _x.discharge, _x.hours, _x.minutes, _x.second,) = _get_struct_12h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.health = str[start:end].decode('utf-8')
      else:
        self.health = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4hf2h().pack(_x.number, _x.throttle, _x.rpm, _x.speed, _x.engine_load, _x.temperature, _x.humidity))
      _x = self.engine_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.battery_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_12h().pack(_x.battery_cap, _x.air_pressure, _x.air_temperature, _x.torque, _x.load, _x.efficiency, _x.voltage, _x.current, _x.discharge, _x.hours, _x.minutes, _x.second))
      _x = self.health
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.number, _x.throttle, _x.rpm, _x.speed, _x.engine_load, _x.temperature, _x.humidity,) = _get_struct_4hf2h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.engine_status = str[start:end].decode('utf-8')
      else:
        self.engine_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_status = str[start:end].decode('utf-8')
      else:
        self.battery_status = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.battery_cap, _x.air_pressure, _x.air_temperature, _x.torque, _x.load, _x.efficiency, _x.voltage, _x.current, _x.discharge, _x.hours, _x.minutes, _x.second,) = _get_struct_12h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.health = str[start:end].decode('utf-8')
      else:
        self.health = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12h = None
def _get_struct_12h():
    global _struct_12h
    if _struct_12h is None:
        _struct_12h = struct.Struct("<12h")
    return _struct_12h
_struct_4hf2h = None
def _get_struct_4hf2h():
    global _struct_4hf2h
    if _struct_4hf2h is None:
        _struct_4hf2h = struct.Struct("<4hf2h")
    return _struct_4hf2h
