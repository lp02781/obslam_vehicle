# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hehe/lidar.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lidar(genpy.Message):
  _md5sum = "c5f50167c14b9c625c4d23ea090650d0"
  _type = "hehe/lidar"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 number
float32 angle_min
float32 angle_max
float32 angle_inc
float32 time_inc
float32 scan_time
float32 range_min
float32 range_max
int16 range_size
int16 count
int16 countless
float32 lidar_ranges_1
float32 lidar_ranges_2
float32 lidar_ranges_3
float32 lidar_ranges_4
float32 lidar_ranges_5
float32 lidar_ranges_6
float32 lidar_ranges_7
float32 lidar_ranges_8
float32 lidar_ranges_9
float32 lidar_ranges_10
float32 lidar_ranges_11
float32 lidar_ranges_12
float32 lidar_ranges_13
float32 lidar_ranges_14
float32 lidar_ranges_15
float32 lidar_ranges_16
float32 lidar_ranges_17
float32 lidar_ranges_18
float32 lidar_ranges_19
float32 lidar_ranges_20
float32 lidar_ranges_21
float32 lidar_ranges_22
float32 lidar_ranges_23
float32 lidar_ranges_24

"""
  __slots__ = ['number','angle_min','angle_max','angle_inc','time_inc','scan_time','range_min','range_max','range_size','count','countless','lidar_ranges_1','lidar_ranges_2','lidar_ranges_3','lidar_ranges_4','lidar_ranges_5','lidar_ranges_6','lidar_ranges_7','lidar_ranges_8','lidar_ranges_9','lidar_ranges_10','lidar_ranges_11','lidar_ranges_12','lidar_ranges_13','lidar_ranges_14','lidar_ranges_15','lidar_ranges_16','lidar_ranges_17','lidar_ranges_18','lidar_ranges_19','lidar_ranges_20','lidar_ranges_21','lidar_ranges_22','lidar_ranges_23','lidar_ranges_24']
  _slot_types = ['int16','float32','float32','float32','float32','float32','float32','float32','int16','int16','int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number,angle_min,angle_max,angle_inc,time_inc,scan_time,range_min,range_max,range_size,count,countless,lidar_ranges_1,lidar_ranges_2,lidar_ranges_3,lidar_ranges_4,lidar_ranges_5,lidar_ranges_6,lidar_ranges_7,lidar_ranges_8,lidar_ranges_9,lidar_ranges_10,lidar_ranges_11,lidar_ranges_12,lidar_ranges_13,lidar_ranges_14,lidar_ranges_15,lidar_ranges_16,lidar_ranges_17,lidar_ranges_18,lidar_ranges_19,lidar_ranges_20,lidar_ranges_21,lidar_ranges_22,lidar_ranges_23,lidar_ranges_24

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lidar, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number is None:
        self.number = 0
      if self.angle_min is None:
        self.angle_min = 0.
      if self.angle_max is None:
        self.angle_max = 0.
      if self.angle_inc is None:
        self.angle_inc = 0.
      if self.time_inc is None:
        self.time_inc = 0.
      if self.scan_time is None:
        self.scan_time = 0.
      if self.range_min is None:
        self.range_min = 0.
      if self.range_max is None:
        self.range_max = 0.
      if self.range_size is None:
        self.range_size = 0
      if self.count is None:
        self.count = 0
      if self.countless is None:
        self.countless = 0
      if self.lidar_ranges_1 is None:
        self.lidar_ranges_1 = 0.
      if self.lidar_ranges_2 is None:
        self.lidar_ranges_2 = 0.
      if self.lidar_ranges_3 is None:
        self.lidar_ranges_3 = 0.
      if self.lidar_ranges_4 is None:
        self.lidar_ranges_4 = 0.
      if self.lidar_ranges_5 is None:
        self.lidar_ranges_5 = 0.
      if self.lidar_ranges_6 is None:
        self.lidar_ranges_6 = 0.
      if self.lidar_ranges_7 is None:
        self.lidar_ranges_7 = 0.
      if self.lidar_ranges_8 is None:
        self.lidar_ranges_8 = 0.
      if self.lidar_ranges_9 is None:
        self.lidar_ranges_9 = 0.
      if self.lidar_ranges_10 is None:
        self.lidar_ranges_10 = 0.
      if self.lidar_ranges_11 is None:
        self.lidar_ranges_11 = 0.
      if self.lidar_ranges_12 is None:
        self.lidar_ranges_12 = 0.
      if self.lidar_ranges_13 is None:
        self.lidar_ranges_13 = 0.
      if self.lidar_ranges_14 is None:
        self.lidar_ranges_14 = 0.
      if self.lidar_ranges_15 is None:
        self.lidar_ranges_15 = 0.
      if self.lidar_ranges_16 is None:
        self.lidar_ranges_16 = 0.
      if self.lidar_ranges_17 is None:
        self.lidar_ranges_17 = 0.
      if self.lidar_ranges_18 is None:
        self.lidar_ranges_18 = 0.
      if self.lidar_ranges_19 is None:
        self.lidar_ranges_19 = 0.
      if self.lidar_ranges_20 is None:
        self.lidar_ranges_20 = 0.
      if self.lidar_ranges_21 is None:
        self.lidar_ranges_21 = 0.
      if self.lidar_ranges_22 is None:
        self.lidar_ranges_22 = 0.
      if self.lidar_ranges_23 is None:
        self.lidar_ranges_23 = 0.
      if self.lidar_ranges_24 is None:
        self.lidar_ranges_24 = 0.
    else:
      self.number = 0
      self.angle_min = 0.
      self.angle_max = 0.
      self.angle_inc = 0.
      self.time_inc = 0.
      self.scan_time = 0.
      self.range_min = 0.
      self.range_max = 0.
      self.range_size = 0
      self.count = 0
      self.countless = 0
      self.lidar_ranges_1 = 0.
      self.lidar_ranges_2 = 0.
      self.lidar_ranges_3 = 0.
      self.lidar_ranges_4 = 0.
      self.lidar_ranges_5 = 0.
      self.lidar_ranges_6 = 0.
      self.lidar_ranges_7 = 0.
      self.lidar_ranges_8 = 0.
      self.lidar_ranges_9 = 0.
      self.lidar_ranges_10 = 0.
      self.lidar_ranges_11 = 0.
      self.lidar_ranges_12 = 0.
      self.lidar_ranges_13 = 0.
      self.lidar_ranges_14 = 0.
      self.lidar_ranges_15 = 0.
      self.lidar_ranges_16 = 0.
      self.lidar_ranges_17 = 0.
      self.lidar_ranges_18 = 0.
      self.lidar_ranges_19 = 0.
      self.lidar_ranges_20 = 0.
      self.lidar_ranges_21 = 0.
      self.lidar_ranges_22 = 0.
      self.lidar_ranges_23 = 0.
      self.lidar_ranges_24 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h7f3h24f().pack(_x.number, _x.angle_min, _x.angle_max, _x.angle_inc, _x.time_inc, _x.scan_time, _x.range_min, _x.range_max, _x.range_size, _x.count, _x.countless, _x.lidar_ranges_1, _x.lidar_ranges_2, _x.lidar_ranges_3, _x.lidar_ranges_4, _x.lidar_ranges_5, _x.lidar_ranges_6, _x.lidar_ranges_7, _x.lidar_ranges_8, _x.lidar_ranges_9, _x.lidar_ranges_10, _x.lidar_ranges_11, _x.lidar_ranges_12, _x.lidar_ranges_13, _x.lidar_ranges_14, _x.lidar_ranges_15, _x.lidar_ranges_16, _x.lidar_ranges_17, _x.lidar_ranges_18, _x.lidar_ranges_19, _x.lidar_ranges_20, _x.lidar_ranges_21, _x.lidar_ranges_22, _x.lidar_ranges_23, _x.lidar_ranges_24))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.number, _x.angle_min, _x.angle_max, _x.angle_inc, _x.time_inc, _x.scan_time, _x.range_min, _x.range_max, _x.range_size, _x.count, _x.countless, _x.lidar_ranges_1, _x.lidar_ranges_2, _x.lidar_ranges_3, _x.lidar_ranges_4, _x.lidar_ranges_5, _x.lidar_ranges_6, _x.lidar_ranges_7, _x.lidar_ranges_8, _x.lidar_ranges_9, _x.lidar_ranges_10, _x.lidar_ranges_11, _x.lidar_ranges_12, _x.lidar_ranges_13, _x.lidar_ranges_14, _x.lidar_ranges_15, _x.lidar_ranges_16, _x.lidar_ranges_17, _x.lidar_ranges_18, _x.lidar_ranges_19, _x.lidar_ranges_20, _x.lidar_ranges_21, _x.lidar_ranges_22, _x.lidar_ranges_23, _x.lidar_ranges_24,) = _get_struct_h7f3h24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h7f3h24f().pack(_x.number, _x.angle_min, _x.angle_max, _x.angle_inc, _x.time_inc, _x.scan_time, _x.range_min, _x.range_max, _x.range_size, _x.count, _x.countless, _x.lidar_ranges_1, _x.lidar_ranges_2, _x.lidar_ranges_3, _x.lidar_ranges_4, _x.lidar_ranges_5, _x.lidar_ranges_6, _x.lidar_ranges_7, _x.lidar_ranges_8, _x.lidar_ranges_9, _x.lidar_ranges_10, _x.lidar_ranges_11, _x.lidar_ranges_12, _x.lidar_ranges_13, _x.lidar_ranges_14, _x.lidar_ranges_15, _x.lidar_ranges_16, _x.lidar_ranges_17, _x.lidar_ranges_18, _x.lidar_ranges_19, _x.lidar_ranges_20, _x.lidar_ranges_21, _x.lidar_ranges_22, _x.lidar_ranges_23, _x.lidar_ranges_24))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.number, _x.angle_min, _x.angle_max, _x.angle_inc, _x.time_inc, _x.scan_time, _x.range_min, _x.range_max, _x.range_size, _x.count, _x.countless, _x.lidar_ranges_1, _x.lidar_ranges_2, _x.lidar_ranges_3, _x.lidar_ranges_4, _x.lidar_ranges_5, _x.lidar_ranges_6, _x.lidar_ranges_7, _x.lidar_ranges_8, _x.lidar_ranges_9, _x.lidar_ranges_10, _x.lidar_ranges_11, _x.lidar_ranges_12, _x.lidar_ranges_13, _x.lidar_ranges_14, _x.lidar_ranges_15, _x.lidar_ranges_16, _x.lidar_ranges_17, _x.lidar_ranges_18, _x.lidar_ranges_19, _x.lidar_ranges_20, _x.lidar_ranges_21, _x.lidar_ranges_22, _x.lidar_ranges_23, _x.lidar_ranges_24,) = _get_struct_h7f3h24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h7f3h24f = None
def _get_struct_h7f3h24f():
    global _struct_h7f3h24f
    if _struct_h7f3h24f is None:
        _struct_h7f3h24f = struct.Struct("<h7f3h24f")
    return _struct_h7f3h24f
