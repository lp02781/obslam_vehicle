// Generated by gencpp from file hehe/sensor.msg
// DO NOT EDIT!


#ifndef HEHE_MESSAGE_SENSOR_H
#define HEHE_MESSAGE_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hehe
{
template <class ContainerAllocator>
struct sensor_
{
  typedef sensor_<ContainerAllocator> Type;

  sensor_()
    : number(0)
    , throttle(0)
    , rpm(0)
    , speed(0)
    , engine_load(0.0)
    , temperature(0)
    , humidity(0)
    , engine_status()
    , battery_status()
    , battery_cap(0)
    , air_pressure(0)
    , air_temperature(0)
    , torque(0)
    , load(0)
    , efficiency(0)
    , voltage(0)
    , current(0)
    , discharge(0)
    , hours(0)
    , minutes(0)
    , second(0)
    , health()  {
    }
  sensor_(const ContainerAllocator& _alloc)
    : number(0)
    , throttle(0)
    , rpm(0)
    , speed(0)
    , engine_load(0.0)
    , temperature(0)
    , humidity(0)
    , engine_status(_alloc)
    , battery_status(_alloc)
    , battery_cap(0)
    , air_pressure(0)
    , air_temperature(0)
    , torque(0)
    , load(0)
    , efficiency(0)
    , voltage(0)
    , current(0)
    , discharge(0)
    , hours(0)
    , minutes(0)
    , second(0)
    , health(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _number_type;
  _number_type number;

   typedef int16_t _throttle_type;
  _throttle_type throttle;

   typedef int16_t _rpm_type;
  _rpm_type rpm;

   typedef int16_t _speed_type;
  _speed_type speed;

   typedef float _engine_load_type;
  _engine_load_type engine_load;

   typedef int16_t _temperature_type;
  _temperature_type temperature;

   typedef int16_t _humidity_type;
  _humidity_type humidity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _engine_status_type;
  _engine_status_type engine_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _battery_status_type;
  _battery_status_type battery_status;

   typedef int16_t _battery_cap_type;
  _battery_cap_type battery_cap;

   typedef int16_t _air_pressure_type;
  _air_pressure_type air_pressure;

   typedef int16_t _air_temperature_type;
  _air_temperature_type air_temperature;

   typedef int16_t _torque_type;
  _torque_type torque;

   typedef int16_t _load_type;
  _load_type load;

   typedef int16_t _efficiency_type;
  _efficiency_type efficiency;

   typedef int16_t _voltage_type;
  _voltage_type voltage;

   typedef int16_t _current_type;
  _current_type current;

   typedef int16_t _discharge_type;
  _discharge_type discharge;

   typedef int16_t _hours_type;
  _hours_type hours;

   typedef int16_t _minutes_type;
  _minutes_type minutes;

   typedef int16_t _second_type;
  _second_type second;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _health_type;
  _health_type health;





  typedef boost::shared_ptr< ::hehe::sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hehe::sensor_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_

typedef ::hehe::sensor_<std::allocator<void> > sensor;

typedef boost::shared_ptr< ::hehe::sensor > sensorPtr;
typedef boost::shared_ptr< ::hehe::sensor const> sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hehe::sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hehe::sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hehe::sensor_<ContainerAllocator1> & lhs, const ::hehe::sensor_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.throttle == rhs.throttle &&
    lhs.rpm == rhs.rpm &&
    lhs.speed == rhs.speed &&
    lhs.engine_load == rhs.engine_load &&
    lhs.temperature == rhs.temperature &&
    lhs.humidity == rhs.humidity &&
    lhs.engine_status == rhs.engine_status &&
    lhs.battery_status == rhs.battery_status &&
    lhs.battery_cap == rhs.battery_cap &&
    lhs.air_pressure == rhs.air_pressure &&
    lhs.air_temperature == rhs.air_temperature &&
    lhs.torque == rhs.torque &&
    lhs.load == rhs.load &&
    lhs.efficiency == rhs.efficiency &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.discharge == rhs.discharge &&
    lhs.hours == rhs.hours &&
    lhs.minutes == rhs.minutes &&
    lhs.second == rhs.second &&
    lhs.health == rhs.health;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hehe::sensor_<ContainerAllocator1> & lhs, const ::hehe::sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hehe

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hehe::sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hehe::sensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hehe::sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hehe::sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hehe::sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hehe::sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hehe::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0c50bebffb4e8af1cdb8ac5a415ed1d";
  }

  static const char* value(const ::hehe::sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0c50bebffb4e8afULL;
  static const uint64_t static_value2 = 0x1cdb8ac5a415ed1dULL;
};

template<class ContainerAllocator>
struct DataType< ::hehe::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hehe/sensor";
  }

  static const char* value(const ::hehe::sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hehe::sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 number\n"
"int16 throttle\n"
"int16 rpm\n"
"int16 speed\n"
"float32 engine_load\n"
"int16 temperature\n"
"int16 humidity\n"
"string engine_status\n"
"string battery_status\n"
"int16 battery_cap\n"
"int16 air_pressure\n"
"int16 air_temperature\n"
"int16 torque\n"
"int16 load\n"
"int16 efficiency\n"
"int16 voltage\n"
"int16 current\n"
"int16 discharge\n"
"int16 hours\n"
"int16 minutes\n"
"int16 second\n"
"string health\n"
"\n"
;
  }

  static const char* value(const ::hehe::sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hehe::sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.throttle);
      stream.next(m.rpm);
      stream.next(m.speed);
      stream.next(m.engine_load);
      stream.next(m.temperature);
      stream.next(m.humidity);
      stream.next(m.engine_status);
      stream.next(m.battery_status);
      stream.next(m.battery_cap);
      stream.next(m.air_pressure);
      stream.next(m.air_temperature);
      stream.next(m.torque);
      stream.next(m.load);
      stream.next(m.efficiency);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.discharge);
      stream.next(m.hours);
      stream.next(m.minutes);
      stream.next(m.second);
      stream.next(m.health);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hehe::sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hehe::sensor_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    s << indent << "throttle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rpm);
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "engine_load: ";
    Printer<float>::stream(s, indent + "  ", v.engine_load);
    s << indent << "temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "humidity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.humidity);
    s << indent << "engine_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.engine_status);
    s << indent << "battery_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.battery_status);
    s << indent << "battery_cap: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_cap);
    s << indent << "air_pressure: ";
    Printer<int16_t>::stream(s, indent + "  ", v.air_pressure);
    s << indent << "air_temperature: ";
    Printer<int16_t>::stream(s, indent + "  ", v.air_temperature);
    s << indent << "torque: ";
    Printer<int16_t>::stream(s, indent + "  ", v.torque);
    s << indent << "load: ";
    Printer<int16_t>::stream(s, indent + "  ", v.load);
    s << indent << "efficiency: ";
    Printer<int16_t>::stream(s, indent + "  ", v.efficiency);
    s << indent << "voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
    s << indent << "discharge: ";
    Printer<int16_t>::stream(s, indent + "  ", v.discharge);
    s << indent << "hours: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hours);
    s << indent << "minutes: ";
    Printer<int16_t>::stream(s, indent + "  ", v.minutes);
    s << indent << "second: ";
    Printer<int16_t>::stream(s, indent + "  ", v.second);
    s << indent << "health: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.health);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEHE_MESSAGE_SENSOR_H
