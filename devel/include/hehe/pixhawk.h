// Generated by gencpp from file hehe/pixhawk.msg
// DO NOT EDIT!


#ifndef HEHE_MESSAGE_PIXHAWK_H
#define HEHE_MESSAGE_PIXHAWK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hehe
{
template <class ContainerAllocator>
struct pixhawk_
{
  typedef pixhawk_<ContainerAllocator> Type;

  pixhawk_()
    : number(0)
    , time()
    , ground_speed(0)
    , latitude(0.0)
    , longitude(0.0)
    , compass(0.0)
    , altitude(0.0)  {
    }
  pixhawk_(const ContainerAllocator& _alloc)
    : number(0)
    , time(_alloc)
    , ground_speed(0)
    , latitude(0.0)
    , longitude(0.0)
    , compass(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _number_type;
  _number_type number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef int16_t _ground_speed_type;
  _ground_speed_type ground_speed;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _compass_type;
  _compass_type compass;

   typedef double _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::hehe::pixhawk_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hehe::pixhawk_<ContainerAllocator> const> ConstPtr;

}; // struct pixhawk_

typedef ::hehe::pixhawk_<std::allocator<void> > pixhawk;

typedef boost::shared_ptr< ::hehe::pixhawk > pixhawkPtr;
typedef boost::shared_ptr< ::hehe::pixhawk const> pixhawkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hehe::pixhawk_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hehe::pixhawk_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hehe::pixhawk_<ContainerAllocator1> & lhs, const ::hehe::pixhawk_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number &&
    lhs.time == rhs.time &&
    lhs.ground_speed == rhs.ground_speed &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.compass == rhs.compass &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hehe::pixhawk_<ContainerAllocator1> & lhs, const ::hehe::pixhawk_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hehe

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hehe::pixhawk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hehe::pixhawk_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hehe::pixhawk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hehe::pixhawk_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hehe::pixhawk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hehe::pixhawk_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hehe::pixhawk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6565b0a16b4f72aa77fa6f71e435557d";
  }

  static const char* value(const ::hehe::pixhawk_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6565b0a16b4f72aaULL;
  static const uint64_t static_value2 = 0x77fa6f71e435557dULL;
};

template<class ContainerAllocator>
struct DataType< ::hehe::pixhawk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hehe/pixhawk";
  }

  static const char* value(const ::hehe::pixhawk_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hehe::pixhawk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 number\n"
"string time\n"
"int16 ground_speed\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 compass\n"
"float64 altitude\n"
;
  }

  static const char* value(const ::hehe::pixhawk_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hehe::pixhawk_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
      stream.next(m.time);
      stream.next(m.ground_speed);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.compass);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pixhawk_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hehe::pixhawk_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hehe::pixhawk_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "ground_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ground_speed);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "compass: ";
    Printer<double>::stream(s, indent + "  ", v.compass);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEHE_MESSAGE_PIXHAWK_H
